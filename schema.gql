# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Academics {
  ACT_Score: Float!
  SAT_Score: Float!
  GPA: Float!
}

type AcceptedOrPending {
  pending: [String!]!
  accepted: [String!]!
}

type Address {
  city: String!
  state: String!
  street: String!
  zip: Float!
}

input AddressInput {
  city: String!
  state: String!
  street: String!
  zip: Float!
}

type Agility {
  jump_score: Float!
  agility_score: Float!
  speed_score: Float!
  core_score: Float!
  movement: Movement!
  speed: Speed!
  jump: Jump!
}

type Baseball {
  velocity: StatsFields!
  exit_speed: StatsFields!
  ball_fielding_100: StatsFields!
  longtoss: StatsFields!
  pop_time: StatsFields!
  home_to_second: StatsFields!
}

type Basketball {
  quarter_court_sprint: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  full_court_dribbling: StatsFields!
  full_court_2_ball_dribbling: StatsFields!
  freethrow: StatsFields!
  three_pointer: StatsFields!
  five_yard_dash: StatsFields!
}

type BMI {
  height: String!
  weight: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Dominance {
  hand_dominance: String!
  eye_dominance: String!
  leg_dominance: String!
}

type Extremity {
  wing_span: Float!
  hand_size: Float!
  shoe_size: Float!
}

type Jump {
  broad_jump: StatsFields!
  triple_jump: StatsFields!
  vertical_jump: StatsFields!
  one_step_vertical_jump: StatsFields!
}

type Movement {
  ten_yard_shuttle: StatsFields!
  twenty_yard_shuttle: StatsFields!
  three_cone_drill: StatsFields!
  t_test: StatsFields!
  compass_agility: StatsFields!
  box_drill: StatsFields!
  quadrant_jump: StatsFields!
}

type Mutation {
  # This is somthing
  createPlayer(id: String!, email: String!, thumbnail: String, user_type: String!, banner: String, personal: PersonalInput!, sport_info: SportInfoInput!, school_info: SchoolInfoInput!, address: AddressInput!): String!
  patchThumbnail(thumbnail: String!, id: String!): String!
}

type Personal {
  first_name: String!
  last_name: String!
  dob: String!
  phone: String!
  gender: String!
}

input PersonalInput {
  first_name: String!
  last_name: String!
  dob: String!
  phone: String!
  gender: String!
}

type Physical {
  bmi: BMI!
  extremity: Extremity!
  dominance: Dominance!
}

type PlayerDto {
  id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  power_score: [PowerScore!]!
  spectators: AcceptedOrPending!
  teams: AcceptedOrPending!
  banner: String!
  likes: [String!]!
  personal: Personal!
  sport_info: SportInfo!
  favorites: [String!]!
  school_info: SchoolInfo!
  address: Address!
  statistics: Statistics!
}

type Power {
  power_score: Float!
  strength: Strength!
  throw: Throw!
}

type PowerScore {
  value: String!
  Date: DateTime!
}

type Query {
  getPlayers: [PlayerDto!]!
  getPlayerByID(id: String!): PlayerDto!
  helloWorld: String!
}

type SchoolInfo {
  grad_year: String!
  school_district: String!
  school: String!
  school_type: String!
}

input SchoolInfoInput {
  grad_year: String!
  school_district: String!
  school: String!
  school_type: String!
}

type Soccer {
  arrowhead_agility: StatsFields!
  yo_yo_recovery: StatsFields!
  endurance_test_30_sec: StatsFields!
  compass_drill: StatsFields!
}

type Speed {
  ten_yard_dash: StatsFields!
  twenty_yard_dash: StatsFields!
  thirty_yard_dash: StatsFields!
  forty_yard_dash: StatsFields!
  fifty_yard_dash: StatsFields!
  sixty_yard_dash: StatsFields!
  ladder_drill: StatsFields!
}

type SportInfo {
  position: String!
  secondary_position: String!
  throwing: String!
  batting: String!
  sport: String!
  committed: String!
  committed_date: String!
}

input SportInfoInput {
  position: String!
  secondary_position: String!
  throwing: String!
  batting: String!
  sport: String!
  committed: String!
  committed_date: String!
}

type Statistics {
  basketball_stats: [Basketball!]!
  baseball_stats: [Baseball!]!
  soccer_stats: [Soccer!]!
  tennis_stats: [Tennis!]!
  volleyball_stats: [Volleyball!]!
  academics: [Academics!]!
  physical: [Physical!]!
  agility: [Agility!]!
  power: [Power!]!
}

type StatsFields {
  value: Float!
  certified: Boolean!
  certifying_entity: String!
}

type Strength {
  bench_press_80: StatsFields!
  bench_press_weight: StatsFields!
  bench_press_PR: StatsFields!
  squat_80: StatsFields!
  squat_weight: StatsFields!
  squat_PR: StatsFields!
  deadlift_80: StatsFields!
  deadlift_weight: StatsFields!
  deadlift_press_PR: StatsFields!
  push_up: StatsFields!
  chin_up: StatsFields!
  sit_up: StatsFields!
  plank: StatsFields!
  grip: StatsFields!
  sit_and_reach: StatsFields!
  stork_balance: StatsFields!
}

type Tennis {
  court_sprint_3quarters: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  server_velocity: StatsFields!
  five_yard_dash: StatsFields!
  return_ball_velocity: StatsFields!
}

type Throw {
  overhead_throw: StatsFields!
  backwards_overhead_throw: StatsFields!
  behind_the_head_throw: StatsFields!
}

type Volleyball {
  court_sprint_3quarters: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  serve_velocity: StatsFields!
  five_yard_dash: StatsFields!
  wall_velocity: StatsFields!
  wall_spike: StatsFields!
  forearm_pass_test: StatsFields!
}
