# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Academics {
  ACT_Score: Float!
  SAT_Score: Float!
  GPA: Float!
}

type Address {
  city: String
  state: String
  street: String
  zip: Float
}

input AddressInput {
  city: String
  state: String
  street: String
  zip: Float
}

type Agility {
  jump_score: Float!
  agility_score: Float!
  speed_score: Float!
  core_score: Float!
  movement: Movement!
  speed: Speed!
  jump: Jump!
}

type Baseball {
  velocity: StatsFields!
  exit_speed: StatsFields!
  ball_fielding_100: StatsFields!
  longtoss: StatsFields!
  pop_time: StatsFields!
  home_to_second: StatsFields!
}

type Basketball {
  quarter_court_sprint: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  full_court_dribbling: StatsFields!
  full_court_2_ball_dribbling: StatsFields!
  freethrow: StatsFields!
  three_pointer: StatsFields!
  five_yard_dash: StatsFields!
}

type BMI {
  height: String!
  weight: String!
}

type BugDto {
  _id: String!
  name: String
  description: String
  message: String!
  date: String!
  category: String!
  email: String!
  first_name: String!
  last_name: String!
}

type ChatDto {
  _id: String!
  name: String
  description: String
  isPremade: Boolean!
  users: [ChatUser!]
  team_id: String
}

type ChatObj {
  chat_id: String!
  team_id: String!
}

input ChatObjInput {
  chat_id: String!
  team_id: String!
}

type ChatUser {
  id: String!
  type: String!
  muted: Boolean!
  muted_type: String
}

input ChatUserInput {
  id: String!
  type: String!
  muted: Boolean!
  muted_type: String
}

type CoachDto {
  _id: String!
  firebase_id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  banner: String
  tokens: [String!]!
  personal: Personal!
  address: Address
  teams: [String!]!
  sport_info: CoachSportInfo!
  favorites: [String!]!
  school_info: CoachSchoolInfo!
}

type CoachSchoolInfo {
  school_district: String
  school: String
  school_type: String
}

input CoachSchoolInfoInput {
  school_district: String
  school: String
  school_type: String
}

type CoachSportInfo {
  sport: String!
  coach_type: String!
}

input CoachSportInfoInput {
  sport: String
  coach_type: String
}

input CreateAddressInput {
  city: String
  state: String
  street: String
  zip: Float
}

input CreateBugInput {
  message: String!
  date: String!
  category: String!
  email: String!
  first_name: String!
  last_name: String!
}

input CreateChatInput {
  name: String
  users: [ChatUserInput!]
  team_id: String
}

input CreateCoachSchoolInfoInput {
  school_district: String
  school: String
  school_type: String
}

input CreateCoachSportInfoInput {
  sport: String!
  coach_type: String!
}

input CreateFieldInput {
  park: String!
  highschool_compatible: Boolean!
}

input CreateParkInput {
  fields: [String!]!
  open_time: String!
  close_time: String!
  address: CreateAddressInput!
}

input CreatePersonalInput {
  first_name: String!
  last_name: String!
  dob: String
  phone: String
  gender: String
}

input CreatePlayerSchoolInfo {
  grad_year: String
  school_district: String
  school: String
  school_type: String
}

input CreateSportInfo {
  position: String!
  secondary_position: String
  throwing: String
  batting: String
  sport: String!
  committed: String
  committed_date: String
}

input CreateTournamentInput {
  start_date: String!
  end_date: String!
  age_groups: String!
  flyer: String
  max_teams: Float
  pay_at_the_plate: Boolean!
  hotels: String
  allowed_assistants: Float
}

type CreateUploadedBy {
  id: String!
  name: String!
}

input CreateUploadedByInput {
  id: String!
  name: String!
}

input CreateVideoInput {
  url: String!
  type: String!
  jersey_color: String
  jersey_number: String
  specific_type: String
  facility: String
  date: String!
  teams: [String!]
  likes: [String!]
  accepted: Boolean
  uploaded_by: CreateUploadedByInput!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DirectorDto {
  _id: String!
  firebase_id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  banner: String
  tokens: [String!]!
  personal: Personal!
  address: Address
  tournaments: [String!]!
  association: String!
}

type Dominance {
  hand_dominance: String!
  eye_dominance: String!
  leg_dominance: String!
}

type EntityDto {
  _id: String!
  name: String
  description: String
}

type Extremity {
  wing_span: Float!
  hand_size: Float!
  shoe_size: Float!
}

type FieldDto {
  _id: String!
  name: String
  description: String
  park: String!
  highschool_compatible: Boolean!
}

type GetCoachesDto {
  accepted: [CoachDto!]!
  pending: [CoachDto!]!
}

type GetPlayersDto {
  pending: [PlayerDto!]!
  accepted: [PlayerDto!]!
}

type GetSpectacles {
  Mom: [PlayerDto!]!
  Dad: [PlayerDto!]!
  Guardian: [PlayerDto!]!
  Spectator: [PlayerDto!]!
}

type GetSpectaclesDto {
  pending: [PlayerDto!]!
  accepted: GetSpectacles!
}

type GetUsersDto {
  coaches: [CoachDto!]!
  players: [PlayerDto!]!
  spectators: [SpectatorDto!]!
  directors: [DirectorDto!]!
}

type Jump {
  broad_jump: StatsFields!
  triple_jump: StatsFields!
  vertical_jump: StatsFields!
  one_step_vertical_jump: StatsFields!
}

type Movement {
  ten_yard_shuttle: StatsFields!
  twenty_yard_shuttle: StatsFields!
  three_cone_drill: StatsFields!
  t_test: StatsFields!
  compass_agility: StatsFields!
  box_drill: StatsFields!
  quadrant_jump: StatsFields!
}

type Mutation {
  """This is something"""
  createCoach(firebase_id: String!, email: String!, thumbnail: String, personal: CreatePersonalInput!, address: CreateAddressInput, sport_info: CreateCoachSportInfoInput!, school_info: CreateCoachSchoolInfoInput): String!

  """This is something"""
  updateCoach(id: String!, firebase_id: String, email: String, thumbnail: String, personal: PersonalInput, address: AddressInput, teams: [String!], sport_info: CoachSportInfoInput, favorites: [String!], school_info: CoachSchoolInfoInput): String!
  addFavorite(coachID: String!, playerID: String!): String!

  """This is something"""
  createDirector(firebase_id: String!, email: String!, thumbnail: String, personal: CreatePersonalInput!, address: CreateAddressInput, tournaments: [String!], association: String): String!

  """This is something"""
  updateDirector(id: String!, firebase_id: String, email: String, thumbnail: String, personal: PersonalInput, address: AddressInput, tournaments: [String!], association: String): String!

  """This is something"""
  createPlayer(firebase_id: String!, email: String!, thumbnail: String, personal: CreatePersonalInput!, address: CreateAddressInput, sport_info: CreateSportInfo!, school_info: CreatePlayerSchoolInfo): Boolean!
  updatePlayer(id: String!, firebase_id: String, email: String, thumbnail: String, personal: PersonalInput, address: AddressInput, sport_info: SportInfoInput, school_info: PlayerSchoolInfoInput): Boolean

  """This is something"""
  acceptSpectator(type: String!, spectatorID: String!, playerID: String!): Boolean!

  """
  This is the same as removing a Player from a Spectator (removes from both)
  """
  removeSpectator(spectatorID: String!, playerID: String!): Boolean!

  """This is something"""
  acceptTeamForPlayer(teamID: String!, playerID: String!): Boolean!

  """Create a new Spectator"""
  createSpectator(firebase_id: String!, email: String!, thumbnail: String, personal: CreatePersonalInput!, address: CreateAddressInput): Boolean!

  """Used to update basic spectator information (likely used in EditInfo"""
  updateSpectator(id: String!, firebase_id: String, email: String, thumbnail: String, personal: PersonalInput, address: AddressInput): Boolean!

  """Add a spectacle (Player obj) to a specific spectator"""
  addSpectacle(playerID: String!, spectatorID: String!): Boolean!

  """
  This is the same as removing a Spectator from a player (removes from both)
  """
  removeSpectacle(playerID: String!, spectatorID: String!): Boolean!

  """
  This is to change the spectator's type in both the Player and Spectator Object
  """
  changeSpectatorType(type: String!, playerID: String!, spectatorID: String!): Boolean!
  createBug(name: String!, description: String, message: String!, date: String!, category: String!, email: String!, first_name: String!, last_name: String!): Boolean!
  updateBug(id: String!, name: String, description: String, message: String, date: String, category: String, email: String, first_name: String, last_name: String): Boolean!
  createChat(name: String, description: String, users: [ChatUserInput!], team_id: String): Boolean!
  updateChat(id: String!, name: String, description: String, users: [ChatUserInput!], team_id: String): Boolean!
  addUserToChat(userID: String!, user_type: String!, chatID: String!): Boolean!
  removeUserFromChat(userID: String!, user_type: String!, chatID: String!): Boolean!
  changeMutedStatusInChat(userID: String!, muted_type: String!, muted: Boolean!, chatID: String!): Boolean!
  createField(name: String!, description: String, park: String!, highschool_compatible: Boolean!): Boolean!
  updateField(id: String!, name: String, description: String, park: String, highschool_compatible: Boolean): Boolean!
  createPark(name: String!, description: String, fields: [String!]!, open_time: String!, close_time: String!, address: CreateAddressInput!): Boolean!
  updatePark(id: String!, name: String, description: String, open_time: String, close_time: String, address: CreateAddressInput): Boolean!
  createTeam(name: String!, description: String, coaches: [String!]!): Boolean!
  updateTeam(id: String!, name: String, description: String): Boolean!
  addPlayerToTeam(playerID: String!, teamID: String!): Boolean!
  addCoachToTeam(coachID: String!, teamID: String!): Boolean!
  removePlayerFromTeam(playerID: String!, teamID: String!): Boolean!
  removeCoachFromTeam(coachID: String!, teamID: String!): Boolean!
  createTournament(name: String!, description: String, start_date: String!, end_date: String!, age_groups: String!, flyer: String, max_teams: Float, pay_at_the_plate: Boolean!, hotels: String, allowed_assistants: Float): Boolean!
  updateTournament(id: String!, name: String, description: String, start_date: String, end_date: String, age_groups: String, flyer: String, max_teams: Float, pay_at_the_plate: Boolean, hotels: String, allowed_assistants: Float): Boolean!
  createVideo(name: String!, description: String, url: String!, type: String!, jersey_color: String, jersey_number: String, specific_type: String, facility: String, date: String!, teams: [String!], likes: [String!], accepted: Boolean, uploaded_by: CreateUploadedByInput!): Boolean!
  updateVideo(id: String!, name: String, description: String, url: String, type: String, jersey_color: String, jersey_number: String, specific_type: String, facility: String, date: String, teams: [String!], likes: [String!], accepted: Boolean, uploaded_by: UploadedByInput): Boolean!
}

type ParkDto {
  _id: String!
  name: String
  description: String
  fields: [String!]!
  open_time: String!
  close_time: String!
  address: Address!
}

type Personal {
  first_name: String!
  last_name: String!
  dob: String
  phone: String
  gender: String
}

input PersonalInput {
  first_name: String
  last_name: String
  dob: String
  phone: String
  gender: String
}

type Physical {
  bmi: BMI!
  extremity: Extremity!
  dominance: Dominance!
}

type PlayerDto {
  _id: String!
  firebase_id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  banner: String
  tokens: [String!]!
  personal: Personal!
  address: Address
  power_score: [PowerScore!]!
  spectators: [PlayerSpectatorDto!]!
  accepted_teams: [String!]!
  pending_teams: [String!]!
  likes: [String!]!
  sport_info: PlayerSportInfo!
  favorites: [String!]!
  school_info: PlayerSchoolInfo!
  statistics: Statistics!
}

type PlayerSchoolInfo {
  grad_year: String
  school_district: String
  school: String
  school_type: String
}

input PlayerSchoolInfoInput {
  grad_year: String
  school_district: String
  school: String
  school_type: String
}

type PlayerSpectatorDto {
  type: String!
  id: String!
  accepted: Boolean!
}

input PlayerSpectatorDtoInput {
  type: String!
  id: String!
  accepted: Boolean!
}

type PlayerSportInfo {
  position: String!
  secondary_position: String
  throwing: String
  batting: String
  sport: String!
  committed: String
  committed_date: String
}

type Power {
  power_score: Float!
  strength: Strength!
  throw: Throw!
}

type PowerScore {
  value: String!
  Date: DateTime!
}

input PowerScoreInput {
  value: String!
  Date: DateTime!
}

type Query {
  getCoaches: [CoachDto!]!
  getCoachByID(id: String!): CoachDto!
  getFavoritesForCoach(coachID: String!): [PlayerDto!]!
  getDirectors: [DirectorDto!]!
  getDirectorByID(id: String!): DirectorDto!
  getPlayers: [PlayerDto!]!
  getPlayerByID(id: String!): PlayerDto!
  getFavoritesForPlayer(playerID: String!): [CoachDto!]!
  getAllSpectators: [SpectatorDto!]!
  getSpectatorByID(spectatorID: String!): SpectatorDto!
  getKidsForSpectator(spectatorID: String!): GetSpectaclesDto!
  getChatsForSpectator(id: String!): [ChatDto!]!
  getBugs: [BugDto!]!
  getBugByID(id: String!): BugDto!
  getChats: [ChatDto!]!
  getChatByID(id: String!): ChatDto!
  getChatUsers(id: String!): GetUsersDto!
  getFields: [FieldDto!]!
  getFieldByID(id: String!): FieldDto!
  getParks: [ParkDto!]!
  getParkByID(id: String!): ParkDto!
  getTeams: [TeamDto!]!
  getTeamByID(teamID: String!): TeamDto!
  getPlayersForTeam(teamID: String!): GetPlayersDto!
  getCoachesForTeam(teamID: String!): [CoachDto!]!
  getTournaments: [TournamentDto!]!
  getTournamentByID(id: String!): TournamentDto!
  getVideos: [VideoDto!]!
  getVideoByID(id: String!): VideoDto!
}

type Soccer {
  arrowhead_agility: StatsFields!
  yo_yo_recovery: StatsFields!
  endurance_test_30_sec: StatsFields!
  compass_drill: StatsFields!
}

type SpectacleObj {
  type: String!
  id: String!
  accepted: Boolean!
}

input SpectacleObjInput {
  type: String!
  id: String!
  accepted: Boolean!
}

type SpectatorDto {
  _id: String!
  firebase_id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  banner: String
  tokens: [String!]!
  personal: Personal!
  address: Address
  chats: [ChatObj!]!
  spectacles: [SpectacleObj!]!
}

type Speed {
  ten_yard_dash: StatsFields!
  twenty_yard_dash: StatsFields!
  thirty_yard_dash: StatsFields!
  forty_yard_dash: StatsFields!
  fifty_yard_dash: StatsFields!
  sixty_yard_dash: StatsFields!
  ladder_drill: StatsFields!
}

input SportInfoInput {
  position: String
  secondary_position: String
  throwing: String
  batting: String
  sport: String
  committed: String
  committed_date: String
}

type Statistics {
  basketball_stats: [Basketball!]!
  baseball_stats: [Baseball!]!
  soccer_stats: [Soccer!]!
  tennis_stats: [Tennis!]!
  volleyball_stats: [Volleyball!]!
  academics: [Academics!]!
  physical: [Physical!]!
  agility: [Agility!]!
  power: [Power!]!
}

type StatsFields {
  value: Float!
  certified: Boolean!
  certifying_entity: String!
}

type Strength {
  bench_press_80: StatsFields!
  bench_press_weight: StatsFields!
  bench_press_PR: StatsFields!
  squat_80: StatsFields!
  squat_weight: StatsFields!
  squat_PR: StatsFields!
  deadlift_80: StatsFields!
  deadlift_weight: StatsFields!
  deadlift_press_PR: StatsFields!
  push_up: StatsFields!
  chin_up: StatsFields!
  sit_up: StatsFields!
  plank: StatsFields!
  grip: StatsFields!
  sit_and_reach: StatsFields!
  stork_balance: StatsFields!
}

type TeamDto {
  _id: String!
  name: String
  description: String
  coaches: [String!]!
  chats: String!
  fullPlayerChat: String!
  fullPlayerAndParentChat: String!
  tournaments: [String!]!
  accepted_players: [String!]!
  pending_players: [String!]!
}

type Tennis {
  court_sprint_3quarters: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  server_velocity: StatsFields!
  five_yard_dash: StatsFields!
  return_ball_velocity: StatsFields!
}

type Throw {
  overhead_throw: StatsFields!
  backwards_overhead_throw: StatsFields!
  behind_the_head_throw: StatsFields!
}

type TournamentDto {
  _id: String!
  name: String
  description: String
  start_date: String!
  end_date: String!
  age_groups: String!
  flyer: String!
  max_teams: Float!
  pay_at_the_plate: Boolean!
  hotels: String!
  allowed_assistants: Float!
  parks: [String!]!
}

input UpdateBugInput {
  message: String
  date: String
  category: String
  email: String
  first_name: String
  last_name: String
}

input UpdateChatInput {
  name: String
  users: [ChatUserInput!]
  team_id: String
}

input UpdateFieldInput {
  park: String
  highschool_compatible: Boolean
}

input UpdateParkInput {
  open_time: String
  close_time: String
  address: CreateAddressInput
}

input UpdateTournamentInput {
  start_date: String
  end_date: String
  age_groups: String
  flyer: String
  max_teams: Float
  pay_at_the_plate: Boolean
  hotels: String
  allowed_assistants: Float
}

input UpdateVideoInput {
  url: String
  type: String
  jersey_color: String
  jersey_number: String
  specific_type: String
  facility: String
  date: String
  teams: [String!]
  likes: [String!]
  accepted: Boolean
  uploaded_by: UploadedByInput
}

input UploadedByInput {
  id: String!
  name: String!
}

type UserDto {
  _id: String!
  firebase_id: String!
  email: String!
  thumbnail: String!
  user_type: String!
  banner: String
  tokens: [String!]!
  personal: Personal!
  address: Address
}

type VideoDto {
  _id: String!
  name: String
  description: String
  url: String!
  type: String!
  jersey_color: String
  jersey_number: String
  specific_type: String
  facility: String
  date: String!
  teams: [String!]
  likes: [String!]
  accepted: Boolean
  uploaded_by: CreateUploadedBy!
}

type Volleyball {
  court_sprint_3quarters: StatsFields!
  laying_agility_drill: StatsFields!
  reactive_shuttle_run: StatsFields!
  serve_velocity: StatsFields!
  five_yard_dash: StatsFields!
  wall_velocity: StatsFields!
  wall_spike: StatsFields!
  forearm_pass_test: StatsFields!
}
